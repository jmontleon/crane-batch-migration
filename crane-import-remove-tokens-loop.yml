- name: read yaml
  set_fact:
    sa_yaml: "{{ lookup('file', sa.path) | from_yaml }}"

- name: Decide which token needs to be deleted
  shell: |
    oc get sa -n {{ namespace }} {{ sa_yaml.metadata.name }} -o go-template={% raw %}"{{ (index .secrets 1).name }}"{% endraw %}
  environment:
    KUBECONFIG: "{{ dst_kubeconfig }}"
  register: secret_one

- name: Decide which token needs to be deleted
  shell: |
    oc get sa -n {{ namespace }} {{ sa_yaml.metadata.name }} -o go-template={% raw %}"{{ (index .secrets 2).name }}"{% endraw %}
  environment:
    KUBECONFIG: "{{ dst_kubeconfig }}"
  register: secret_two

- when: "'-dockercfg-' in secret_one.stdout"
  block:
  - name: Remove token generated by new cluster
    shell: |
      oc patch sa -n {{ namespace }} {{ sa_yaml.metadata.name }} --type json -p {% raw %}'[{ "op": "remove", "path": "/secrets/2" }]'{% endraw %}
    environment:
      KUBECONFIG: "{{ dst_kubeconfig }}"

  - name: Remove secret of token generated by new clsuter
    shell: oc delete secret -n {{ namespace }} {{ secret_two.stdout }}
    environment:
      KUBECONFIG: "{{ dst_kubeconfig }}"

- when: not('-dockercfg-' in secret_one.stdout)
  block:
  - name: Remove token generated by new cluster from SA
    shell: |
      oc patch sa -n {{ namespace }} {{ sa_yaml.metadata.name }} --type json -p {% raw %}'[{ "op": "remove", "path": "/secrets/1" }]'{% endraw %}
    environment:
      KUBECONFIG: "{{ dst_kubeconfig }}"

  - name: Remove secret of token generated by new clsuter
    shell: oc delete secret -n {{ namespace }} {{ secret_one.stdout }}
    environment:
      KUBECONFIG: "{{ dst_kubeconfig }}"
